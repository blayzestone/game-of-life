{"version":3,"sources":["components/Grid.js","App.js","index.js"],"names":["Grid","props","style","width","display","gridTemplate","rows","cols","gap","grid","map","row","x","cell","y","onClick","isRunning","toggleCellState","backgroundColor","App","useState","setRows","setCols","createGrid","setGrid","generation","setGeneration","setIsRunning","runningSpeed","setRunningSpeed","runningRef","useRef","current","runSimulation","useCallback","produce","gridCopy","i","j","sum","getNeighborCount","setTimeout","reduce","acc","neighborX","neighborY","getCell","Math","floor","random","randomizeGrid","onChange","e","console","log","target","value","selected","type","min","max","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a2317ef.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Grid(props) {\r\n  const alive = \"#ffe4e1\";\r\n  const dead = \"#222\";\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"min-content\",\r\n        display: \"grid\",\r\n        gridTemplate: `repeat(${props.rows}, 20px) / repeat(${props.cols}, 20px)`,\r\n        gap: \"1px\",\r\n      }}\r\n    >\r\n      {props.grid.map((row, x) => {\r\n        return row.map((cell, y) => {\r\n          return (\r\n            <div\r\n              onClick={() => {\r\n                if (!props.isRunning) {\r\n                  props.toggleCellState(x, y);\r\n                }\r\n              }}\r\n              style={{\r\n                backgroundColor: cell ? alive : dead,\r\n              }}\r\n            ></div>\r\n          );\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React, { useState, useCallback, useRef } from \"react\";\r\nimport produce from \"immer\";\r\n\r\nimport Grid from \"./components/Grid\";\r\n\r\nfunction App() {\r\n  const [rows, setRows] = useState(25);\r\n  const [cols, setCols] = useState(25);\r\n  const [grid, setGrid] = useState(createGrid(rows, cols, 0));\r\n  const [generation, setGeneration] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [runningSpeed, setRunningSpeed] = useState(1);\r\n\r\n  const runningRef = useRef(isRunning);\r\n  runningRef.current = isRunning;\r\n\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n\r\n    setGeneration((generation) => generation + 1);\r\n\r\n    setGrid((grid) =>\r\n      produce(grid, (gridCopy) => {\r\n        for (let i = 0; i < rows; i++) {\r\n          for (let j = 0; j < cols; j++) {\r\n            const sum = getNeighborCount(i, j, grid);\r\n\r\n            if (gridCopy[i][j] && sum < 2) {\r\n              gridCopy[i][j] = 0;\r\n            } else if (gridCopy[i][j] && sum > 3) {\r\n              gridCopy[i][j] = 0;\r\n            }\r\n\r\n            if (!gridCopy[i][j] && sum === 3) {\r\n              gridCopy[i][j] = 1;\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    setTimeout(runSimulation, 200 * runningSpeed);\r\n  });\r\n\r\n  function createGrid(rows, cols) {\r\n    const grid = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row[j] = 0;\r\n      }\r\n      grid[i] = row;\r\n    }\r\n\r\n    return grid;\r\n  }\r\n\r\n  function randomizeGrid() {\r\n    const grid = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      const row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row[j] = Math.floor(Math.random() * 2);\r\n      }\r\n      grid[i] = row;\r\n    }\r\n\r\n    return grid;\r\n  }\r\n\r\n  function getCell(x, y, grid) {\r\n    if (x < 0) {\r\n      x = rows - 1;\r\n    } else if (x >= rows) {\r\n      x = 0;\r\n    }\r\n\r\n    if (y < 0) {\r\n      y = cols - 1;\r\n    } else if (x >= rows) {\r\n      y = 0;\r\n    }\r\n\r\n    return grid[x][y];\r\n  }\r\n\r\n  function toggleCellState(x, y) {\r\n    setGrid(\r\n      produce(grid, (gridCopy) => {\r\n        gridCopy[x][y] = gridCopy[x][y] ? 0 : 1;\r\n      })\r\n    );\r\n  }\r\n\r\n  function getNeighborCount(x, y, grid) {\r\n    const relativeNeighborPositions = [\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [0, 1],\r\n      [1, 1],\r\n      [1, 0],\r\n      [1, -1],\r\n      [0, -1],\r\n      [-1, -1],\r\n    ];\r\n\r\n    return relativeNeighborPositions.reduce((acc, [neighborX, neighborY]) => {\r\n      const cell = getCell(x + neighborX, y + neighborY, grid);\r\n      return (acc += cell);\r\n    }, 0);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>The Game of Life</h1>\r\n      <h2>Generation #{generation}</h2>\r\n      <button\r\n        onClick={() => {\r\n          setIsRunning(!isRunning);\r\n          runningRef.current = !isRunning;\r\n          runSimulation();\r\n        }}\r\n      >\r\n        {isRunning ? \"Pause\" : \"Play\"}\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          if (!isRunning) {\r\n            setGeneration(0);\r\n            setGrid(createGrid(rows, cols));\r\n          }\r\n        }}\r\n      >\r\n        Reset\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          if (!isRunning) {\r\n            setGrid(randomizeGrid());\r\n          }\r\n        }}\r\n      >\r\n        Randomize\r\n      </button>\r\n      <select\r\n        onChange={(e) => {\r\n          console.log(e.target.value);\r\n          setRunningSpeed(e.target.value);\r\n        }}\r\n      >\r\n        <option value={2}>0.5x</option>\r\n        <option value={1} selected>\r\n          1x\r\n        </option>\r\n        <option value={0.5}>2x</option>\r\n      </select>\r\n      <input\r\n        onChange={(e) => {\r\n          if (!isRunning) {\r\n            setCols(e.target.value || 2);\r\n          }\r\n        }}\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"100\"\r\n        placeholder=\"width\"\r\n      />\r\n      <input\r\n        onChange={(e) => {\r\n          if (!isRunning) {\r\n            setRows(e.target.value || 2);\r\n          }\r\n        }}\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"100\"\r\n        placeholder=\"height\"\r\n      />\r\n      <Grid\r\n        isRunning={isRunning}\r\n        grid={grid}\r\n        rows={rows}\r\n        cols={cols}\r\n        toggleCellState={toggleCellState}\r\n        setGrid={setGrid}\r\n      />\r\n      <ul>\r\n        <li>\r\n          Any live cell with two or three live neighbors survives into the next\r\n          generation.\r\n        </li>\r\n        <li>Any dead cell with three neighbors becomes a live cell.</li>\r\n        <li>All other cells die in the next generation.</li>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}